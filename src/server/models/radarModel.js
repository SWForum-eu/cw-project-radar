//
// IMPORTS
//
// libraries
const mongoose = require('mongoose')
const slugify = require('slugify')
const beautifyUnique = require('mongoose-beautiful-unique-validation')
const nextSeq = require('./sequenceModel')

// app modules
const { RadarRendering } = require('./radarDataModel')

const radarSchema = new mongoose.Schema({
    num_id: {
        // Radars have sequence numbers to be able to order them ascending or descending order of publication. (Earlier 
        // versions had fixed release names implying an implicit periodical order.)
        // In order to be domain agnostic, restrictions on release are removed, with this sequence number replacing the 
        // ordering capabilities.
        // The sequence nbr is automatically initialised when the radar is created in the DB.
        // The num_id is designed to be READ ONLY
        type: Number,
        unique: 'A radar with the id {{VALUE}} already exists.',
    }, 
    slug: { 
        // the slug is a unique string comprising the year and release identifier.
        // A rader edition can always be identified by its slug.
        // the slug is automatically generated by this model (see function "radarSchema.pre('save') below)
        // If year and release tag are modified, the slug will be updated automatically by the system.
        type: String,
        unique: 'A radar with the identifier {{VALUE}} already exists.',
    },
    name: {
        // A human readable version of the slug. Slug and name are very similar. For example, 
        // if  year is set to 2022 and release to "Spring", the the slug will be "spring-2022" and the name "Spring 2022"
        // The name is automatically set & updated together with the slug.
        type: String,
    },
    year: {
        // The year the radar edition was created. 
        type: Number,
        required: [true, "A radar's year is required."],
        min: 2018,
    },
    release: {
        // the release tag of the radar edition. Must be unique within the scope of a calendar year (otherwise the 
        // computed slug and name would fail their uniqueness constraints), but can be reused across different years 
        // to denote periodical releases.
        type: String,
        required: [true, "A radar's release name is required."],
    },
    summary: {
        // A summary describing the radar edition. 
        type: String,
    },
    status: {
        // A radar has a lifecycle; at first it is created (including the rendering). For quality checks
        type: String,
        required: true,
        enum: {
            values: ['created', 'published', 'archived'],
            message: 'Status must be either created, published, or archived.',
        },
        default: 'created',
    },
    referenceDate: Date, // the radar's reference/cutoff date. To create a radar, supply the reference date.
    publicationDate: Date, // the date this radar was published. Automatically set when published.
    rendering: {
        type: mongoose.Schema.ObjectId,
        ref: 'RadarRendering',
    },
})

//
// SCHEMA MIDDLEWARE
//
// middleware to run when radars get created
radarSchema.pre('save', async function (next) {
    if (this.isNew) {
        // ensure thatr num_id is unique and set
        this.num_id = await nextSeq('radar')
    }
    if (this.isModified('year') || this.isModified('release')) {
        // set slug and name
        this.slug = slugify(`${this.release} ${this.year}`, { lower: true })
        this.name = this.release + ' ' + this.year
    }

    // run next middleware
    next()

})

// delete radardata and radarrendering when deleting a radar
radarSchema.post('findOneAndDelete', async function (doc) {
    // delete all associated radar datas
    await RadarRendering.findByIdAndDelete(doc.rendering)
})

//
// INDEXES
//
radarSchema.index({ num_id: 1 }, { unique: true })
radarSchema.index({ slug: 1 }, { unique: true })
radarSchema.index({ slug: 1, status: 1 }, { unique: true })

//
// SCHEMA PLUGINS
//
radarSchema.plugin(beautifyUnique)

//
// CREATE MODEL
//
const Radar = mongoose.model('Radar', radarSchema)

//
// EXPORTS
//
module.exports = Radar
